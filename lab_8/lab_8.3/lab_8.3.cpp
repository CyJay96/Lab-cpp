/*

Дата сдачи: ...

Объявить класс «многоразрядное целое число». Количество разрядов числа хранить в поле класса,
значения разрядов числа хранить в динамической памяти, основание системы счисления задавать константой.
Реализовать:
1) три вида конструктора (без аргументов, инициализации, копирования);
2) деструктор;
3) перегрузить операции ввода/вывода данных;
4) перегрузить оператор индексирования [] для доступа к разрядам числа;
5) операции в задании реализовать посредством перегрузки.
Объявление класса разместить в заголовочном файле, определения методов – во втором файле, определение главной функций программы – в третьем файле.
При переполнении старшего разряда лишние биты теряются.
Примечание.
Оператор умножения многоразрядных чисел удобно реализовать через более простые перегруженные операторы:
умножение многоразрядного числа на одноразрядное число, сдвиг многоразрядного числа на целое число разрядов, сложение многоразрядных чисел.
Оператор деления многоразрядных чисел удобно реализовать через более простые перегруженные операторы:
сдвиг многоразрядного числа на целое число разрядов, сравнение и вычитание многоразрядных чисел.
Выполнить задание, используя объекты этого класса.

Объявить класс «64-разрядное целое двоичное число со знаком» (использовать дополнительный двоичный код).
Реализовать операции: сложения, умножения, операцию возведения в степень. Вычислить 3^12 + (-3)^11 + 3^10 + (-3)^9.

*/


#include "Number.h"

void multi(int* num, int degree) {
	num[0] = 1;
	num[1] = 1;

	for (int p = 0; p < degree; ++p) {
		int b = 0;

		for (int i = 1; i <= num[0]; ++i) {
			b += num[i] * 3;
			num[i] = b % 10;
			b /= 10;
		}

		if (b != 0) {
			num[0]++;
			num[num[0]] = b;
		}
	}
}

void output(int* num) {
	for (int i = num[0]; i >= 1; --i) {
		cout << num[i];
	}
	cout << endl;
}

int main() {
	int* num = new int[100];
	multi(num, 12);
	output(num);
	delete[] num;

	Number a;
	cin >> a;

	cout << endl << "Press any key to continue..." << endl;
	_getch();

	return 0;
}